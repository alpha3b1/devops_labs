Description: >
    Isaac Gutierrez
    Server stack

Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:

  Lab02S3ReadOnlyRole:
    Description: Read only role use by EC2 instances to read bucket
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - 
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Path: "/"
              
  Lab02S3ReadOnlyPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ro_lab02apprep"
      PolicyDocument:
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - "s3:GetObject"
              - "s3:GetObjectAcl"
            Resource: "arn:aws:s3:::lab02apprep/*"
      Roles:
        -
          Ref: "Lab02S3ReadOnlyRole"

  AppServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: "lab02InstanceProfile"
      Roles:
        - 
          Ref: "Lab02S3ReadOnlyRole"

  AppServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  AppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: "AppServerInstanceProfile"
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://lab02apprep/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-0ac73f33a1888c64a
      SecurityGroups:
      - Ref: AppServerSecGroup
      InstanceType: t3.medium
      IamInstanceProfile: "lab02InstanceProfile"
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  AppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: AppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: AppTargetGroup

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

# Load Balancer configuration

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: AppTargetGroup
      LoadBalancerArn:
        Ref: AppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'AppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

# Create access server
  AccesServerGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For components in the public subnets
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  AccessServer: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0ac73f33a1888c64a"
      KeyName: "ssh_access"
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      NetworkInterfaces:
        - AssociatePublicIpAddress: "True"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "AccesServerGroup"
          SubnetId:
            Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"

Outputs:
  AppLB:
    Description: Access URL to load balancer
    Value: !Join ["",["http://",!GetAtt AppLB.DNSName]]
    Export:
      Name: "LB-URL"
